{"version":3,"sources":["components/img/图片.jpg","Login/register.jsx","Login/login.jsx","components/Layout/index.jsx","components/componentType/index.jsx","components/Install/index.jsx","components/Cass-Z/index.jsx","components/LifeCycle-Z/index.jsx","components/PropsContent-Z/index.jsx","components/Classdiff/Classdiff.jsx","components/Questionnaire/index.jsx","Login/index.jsx","serviceWorker.js","index.js"],"names":["module","exports","myState","username","password","ispassword","email","Register","reSetFrom","setState","handChange","target","name","value","register","state","trim","length","alert","test","onregister","obj","sessionStorage","setItem","JSON","stringify","props","getstatus","this","className","onReset","autoComplete","type","onChange","placeholder","onClick","Component","Login","handleChange","yanzheng","userinfo","pwdinfo","onSubmit","user","parse","getItem","Header","Layout","Sider","Content","leftNav","iconType","text","hash","id","Mylayout","toggle","collapsed","trigger","collapsible","theme","mode","defaultSelectedKeys","map","item","index","Item","key","style","background","padding","margin","minHeight","children","React","title","label","span","Panel","Collapse","customPanelStyle","borderRadius","marginBottom","border","overflow","bordered","defaultActiveKey","expandIcon","isActive","rotate","header","color","fontWeight","Classdiff","visible","showModal","handleOk","e","console","log","handleCancel","marginTop","onOk","onCancel","src","tupian","marginLeft","data","size","footer","dataSource","renderItem","selest","checkbox","radio","textarea","sex","hobby","Index","handonSubmit","event","preventDefault","querySelectorAll","fn","textAlign","fontSize","newCheckbox","checked","ooo","getAttribute","eee","call","window","location","isCom","slice","onhashchange","Dom","Fragment","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.67f5c13e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/图片.e5fdc4d9.jpg\";","import React, { Component } from 'react';\r\nimport './style/index.scss';\r\nimport { Button } from 'antd';\r\nconst myState = {\r\n  username: '',\r\n  password: '',\r\n  ispassword: '',\r\n  email: ''\r\n};\r\nclass Register extends Component {\r\n  //重置表单事件\r\n  reSetFrom = () => {\r\n    this.setState(myState);\r\n  };\r\n\r\n  //改变state的值\r\n  handChange = ({ target }) => {\r\n    this.setState({\r\n      [target.name]: target.value\r\n    });\r\n  };\r\n  constructor() {\r\n    super();\r\n    this.state = myState;\r\n  }\r\n  //渲染函数\r\n  render() {\r\n    const { username, password, ispassword, email } = this.state;\r\n    return (\r\n      <div className=\"max-zrb \">\r\n        <form\r\n          onReset={this.reSetFrom}\r\n          autoComplete=\"off\"\r\n          className=\"ysb-form-001\"\r\n        >\r\n          <div className=\"titel-zrb\">\r\n            <h1>register to your account</h1>\r\n          </div>\r\n          <label>\r\n            <span className=\"ysb-span-001\"> 用户名：</span>\r\n            <input\r\n              className=\"ysb-input-001\"\r\n              type=\"text\"\r\n              value={username}\r\n              onChange={this.handChange}\r\n              name=\"username\"\r\n              placeholder=\"请输入您的用户名\"\r\n            />\r\n          </label>\r\n          <label>\r\n            <span className=\"ysb-span-001\">密码框：</span>\r\n            <input\r\n              className=\"ysb-input-002\"\r\n              type=\"password\"\r\n              value={password}\r\n              onChange={this.handChange}\r\n              name=\"password\"\r\n              placeholder=\"请输入您的密码\"\r\n            />\r\n          </label>\r\n          <label>\r\n            <span className=\"ysb-span-001\">确认框：</span>\r\n            <input\r\n              className=\"ysb-input-002\"\r\n              type=\"password\"\r\n              value={ispassword}\r\n              onChange={this.handChange}\r\n              name=\"ispassword\"\r\n              placeholder=\"请确认您的密码\"\r\n            />\r\n          </label>\r\n          <label>\r\n            <span className=\"ysb-span-001\">邮箱框：</span>\r\n            <input\r\n              className=\"ysb-input-002\"\r\n              type=\"text\"\r\n              value={email}\r\n              onChange={this.handChange}\r\n              name=\"email\"\r\n              placeholder=\"请输入您的邮箱\"\r\n            />\r\n          </label>\r\n          <label>\r\n            <button type=\"reset\" className=\"ysb-btn-001\">\r\n              重置\r\n            </button>\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={this.onregister}\r\n              className=\"ysb-btn-002\"\r\n            >\r\n              注册\r\n            </Button>\r\n          </label>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n  register = () => {\r\n    //1.前端验证，验证通过以后\r\n    const { username, password, ispassword, email } = this.state;\r\n    if (!username.trim() || username.length < 6) {\r\n      alert('用户名不能为空,且长度不小于6位');\r\n      return false;\r\n    } else if (!password.trim() || !/^(\\w){6,20}$/.test(password)) {\r\n      alert('密码不能为空,且必须是6-20个字母、数字、下划线');\r\n      return false;\r\n    } else if (!(password === ispassword)) {\r\n      alert('两次密码不一致，请检查密码');\r\n      return false;\r\n    } else if (\r\n      !email.trim() ||\r\n      !/^([a-zA-Z]|[0-9])(\\w|\\-)+@[a-zA-Z0-9]+\\.([a-zA-Z]{2,4})$/.test(email)\r\n    ) {\r\n      alert('邮箱格式不正确');\r\n    } else {\r\n      return true;\r\n    }\r\n  };\r\n  onregister = () => {\r\n    // alert();\r\n    if (this.register()) {\r\n      let obj = {};\r\n      obj.username = this.state.username;\r\n      obj.password = this.state.password;\r\n      sessionStorage.setItem('user', JSON.stringify(obj));\r\n      this.props.getstatus('Login');\r\n    }\r\n    // else {\r\n    //   alert('网络错误，稍后重试');\r\n    // }\r\n  };\r\n}\r\nexport default Register;\r\n// getItem 是获取\r\n//setItem 是设置\r\n","import React, { Component } from 'react';\r\nimport './style/index.scss';\r\nexport default class Login extends Component {\r\n  constructor() {\r\n    super();\r\n    let user = JSON.parse(sessionStorage.getItem('user')) || ''; //拿到缓存的值\r\n    this.state = {\r\n      // 设置默认值\r\n      username: user.username, //默认拿到的user值\r\n      password: '', //默认拿到的pwd值\r\n      userinfo: user.username,\r\n      pwdinfo: user.password\r\n    };\r\n  }\r\n  //改变input值\r\n  handleChange = ({ target }) => {\r\n    this.setState({\r\n      [target.name]: target.value\r\n    });\r\n  };\r\n  // 验证函数\r\n  yanzheng = () => {\r\n    const { userinfo, pwdinfo } = this.state;\r\n    if (this.state.username !== userinfo) {\r\n      alert('用户名错误');\r\n      return false;\r\n    } else if (this.state.password !== pwdinfo) {\r\n      alert('密码错误');\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n    // 从state里拿到默认值\r\n  };\r\n  //提交\r\n  onSubmit = () => {\r\n    if (this.yanzheng()) {\r\n      this.props.getstatus('ComponentType');\r\n    }\r\n  };\r\n  render() {\r\n    const { username, password } = this.state;\r\n    return (\r\n      <div className=\"max-zrb-1\">\r\n        <form className=\"ysb-form-002\">\r\n          <h1>Login to your account</h1>\r\n          <label>\r\n            <input\r\n              autoComplete=\"off\"\r\n              type=\"text\"\r\n              name=\"username\"\r\n              value={username}\r\n              onChange={this.handleChange}\r\n              placeholder=\"用户名\"\r\n              className=\"ysb-input-003\"\r\n            />\r\n          </label>\r\n          <label>\r\n            <input\r\n              autoComplete=\"off\"\r\n              type=\"password\"\r\n              value={password}\r\n              name=\"password\"\r\n              onChange={this.handleChange}\r\n              placeholder=\"密码\"\r\n              className=\"ysb-input-004\"\r\n            />\r\n          </label>\r\n          <label>\r\n            <button type=\"button\" onClick={this.onSubmit} className=\"ysb-login\">\r\n              Login...\r\n            </button>\r\n          </label>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Layout, Menu, Icon } from 'antd';\r\nconst { Header, Sider, Content } = Layout;\r\n// 左侧一级导航的数据\r\nconst leftNav = [\r\n  {\r\n    iconType: 'video-camera',\r\n    text: '受控组件和非受控组价',\r\n    hash: 'ComponentType',\r\n    id: '1'\r\n  },\r\n  { iconType: 'video-camera', text: 'form表单用法', hash: 'Install', id: '2' },\r\n  { iconType: 'read', text: '表单的使用', hash: 'Cass', id: '3' },\r\n  { iconType: 'save', text: '边界错误', hash: 'LifeCycle', id: '4' },\r\n  {\r\n    iconType: 'switcher',\r\n    text: 'React中的列表和diff',\r\n    hash: 'PropsContent',\r\n    id: '5'\r\n  },\r\n  {\r\n    iconType: 'video-camera',\r\n    text: 'event事件对象',\r\n    hash: 'Classdiff',\r\n    id: '6'\r\n  },\r\n  { iconType: 'video-camera', text: '调查问卷', hash: 'Questionnaire', id: '7' }\r\n];\r\nexport default class Mylayout extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      // 控制展开收起\r\n      collapsed: false\r\n    };\r\n  }\r\n  // 切换的方法\r\n  toggle = () => {\r\n    this.setState({\r\n      collapsed: !this.state.collapsed\r\n    });\r\n  };\r\n  render(props) {\r\n    /*\r\n    Layout:容器组件，包裹组件\r\n    Sider：侧边栏，放导航的\r\n    Header：头部组件\r\n    Menu：做折叠导航的组件\r\n    Content：内容展示组件【重要】\r\n    */\r\n    const { getstatus } = this.props;\r\n    return (\r\n      <Layout>\r\n        <Sider trigger={null} collapsible collapsed={this.state.collapsed}>\r\n          <div className=\"logo\" />\r\n          <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\r\n            {leftNav.map((item, index) => {\r\n              return (\r\n                <Menu.Item\r\n                  key={index}\r\n                  onClick={() => {\r\n                    getstatus(item.hash);\r\n                    // this.props.getsoudata(item.id);\r\n                  }}\r\n                >\r\n                  <Icon type={item.iconType} />\r\n                  <span>{item.text}</span>\r\n                </Menu.Item>\r\n              );\r\n            })}\r\n          </Menu>\r\n        </Sider>\r\n        <Layout>\r\n          <Header style={{ background: '#fff', padding: 0 }}>\r\n            <Icon\r\n              className=\"trigger\"\r\n              type={this.state.collapsed ? 'menu-unfold' : 'menu-fold'}\r\n              onClick={this.toggle}\r\n            />\r\n          </Header>\r\n          <Content\r\n            style={{\r\n              margin: '24px 16px',\r\n              padding: 24,\r\n              background: '#fff',\r\n              minHeight: 522\r\n            }}\r\n          >\r\n            {/* 隐式渲染传递进来的组件 */}\r\n            {this.props.children}\r\n          </Content>\r\n        </Layout>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Descriptions } from 'antd';\r\n\r\n\r\nexport default props => {\r\n  return (\r\n    <Descriptions title=\"受控组件和非受控组件\">\r\n     <Descriptions.Item label=\"\" key=\"1\" span={3}>\r\n        <div>\r\n          <h2>受控组件</h2>\r\n          <div>\r\n          如果一个 input 表单元素的值是有 React 控制，就会成为受控组件。\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <h2>非受控组件 </h2>\r\n          <div>非受控意味着我可以不需要设置它的state属性，而通过ref来操作真实的DOM。</div>\r\n        </div>\r\n        \r\n      </Descriptions.Item>\r\n  </Descriptions>\r\n  );\r\n};","import React, { Component } from 'react';\r\nimport { Collapse, Icon } from 'antd';\r\nconst { Panel } = Collapse;\r\nconst customPanelStyle = {\r\n  background: '#f7f7f7',\r\n  borderRadius: 4,\r\n  marginBottom: 24,\r\n  border: 0,\r\n  overflow: 'hidden'\r\n};\r\nexport default class index extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Collapse\r\n          bordered={false}\r\n          defaultActiveKey={['1']}\r\n          expandIcon={({ isActive }) => (\r\n            <Icon type=\"caret-right\" rotate={isActive ? 90 : 0} />\r\n          )}\r\n        >\r\n          <Panel header=\"表单的使用\" key=\"1\" style={customPanelStyle}>\r\n            <p>\r\n              1:表单里的元素\r\n              <span style={{ color: 'red' }}>1:input</span>\r\n              <span style={{ color: 'red' }}>2:textarea</span>\r\n              <span style={{ color: 'red' }}>3:select&&option</span>\r\n              <span style={{ color: 'red' }}>4:button</span>\r\n              <span style={{ color: 'red' }}>5:label</span>\r\n            </p>\r\n            <p>2.合理地使用表单元素：使用label去包裹input及其它表单的元素</p>\r\n            <p>\r\n              3.在from表单里button按钮类型必须指定，否则会触发表单的默认事件\r\n            </p>\r\n            <p>4:具体使用:</p>\r\n            <p>\r\n              {' '}\r\n              ④.①：使用input的时候需要添加name属性，该属性是react内置的，添加其它自定义属性无效：name的值一定是和该input绑定的value变量名一致\r\n            </p>\r\n            <p> ④.②：修改值的时候，使用元素的name属性去做键名</p>\r\n          </Panel>\r\n          <Panel header=\"事件对象\" key=\"2\" style={customPanelStyle}>\r\n            <p>\r\n              {' '}\r\n              event：事件对象---\r\n              react中叫做合成的事件对象【react封装的事件对象】\r\n            </p>\r\n            <p>event事件对象包含的通用属性:</p>\r\n            <p> 1、event.target:被触发的具体的元素.这个是不确定的,</p>\r\n            <p> 2、event.currentTarget:事件被绑定到的具体元素,</p>\r\n            <p> 3、event.nativeEvent:原生事件对象,</p>\r\n            <p> 4、event.preventDefault() 清除默认事件,</p>\r\n            <p>\r\n              {' '}\r\n              5、event.stopPropagation() 清除冒泡\r\n              清除冒泡写在要清除的子级上,因为冒泡是从内向外的(从子向父){' '}\r\n            </p>\r\n            <p>event.persist()将event对象的属性值强制保留</p>\r\n            <p>解决的问题:event对象在异步方法里丢失属性值的问题</p>\r\n          </Panel>\r\n          <Panel header=\"受控组件和非受控组件\" key=\"3\" style={customPanelStyle}>\r\n            <p>\r\n              受控组件: 如果一个 input 表单元素的值是有 React\r\n              控制，就会成为受控组件。\r\n            </p>\r\n            <p>\r\n              非受控组件:非受控意味着我可以不需要设置它的state属性，而通过ref来操作真实的DOM。\r\n            </p>\r\n          </Panel>\r\n          <Panel header=\"条件渲染的几种方式\" key=\"4\" style={customPanelStyle}>\r\n            <p> 1、if 2、switch 3、|| 4、&& 5、！ 6、 三目运算符</p>\r\n            <p>三目写法和&&的对比</p>\r\n            <p>1.三目还是if的执行逻辑.及只要有一个条件成立，则后面的不再判断</p>\r\n            <p>缺点:三目的语法不利于阅读，代码过长，还必须有一个没用的else</p>\r\n            <p>\r\n              2.&&.\r\n              在代码阅读起来直观，但是，每一行都会进行比较，造成了不必要的浪费\r\n            </p>\r\n          </Panel>\r\n          <Panel header=\"边界错误\" key=\"5\" style={customPanelStyle}>\r\n            <p>\r\n              定义:使用私有钩子函数，捕获子组件的错误，并且优雅的使用备用ui来替代错误提示。\r\n              凡是导致页面无法渲染的错误\r\n            </p>\r\n            <p style={{ color: 'red' }}>\r\n              错误边界无法捕获以下场景中产生的错误：\r\n            </p>\r\n            <p style={{ color: 'red' }}>1.接口错误 </p>\r\n            <p style={{ color: 'red' }}>2.事件里的错误</p>\r\n            <p style={{ color: 'red' }}>3.服务端错误</p>\r\n            <p style={{ color: 'red' }}>4.非子组件的错误</p>\r\n            <p style={{ fontWeight: 'blod' }}>\r\n              使用:在本地开发环境中,还是会有错误提示的，但是打包代码上线后，给用户展示的就不会再有错误提示了。\r\n            </p>\r\n          </Panel>\r\n          <Panel header=\"列表和diff\" key=\"6\" style={customPanelStyle}>\r\n            <p>1、key 概念利用 diff 算法</p>\r\n            <p>2、元素的 key 只有在它和它的兄弟节点对比时才有意义。</p>\r\n            <p> 3、 上下文对象是 this(一个空间的作用域)</p>\r\n            <p>\r\n              {' '}\r\n              key:为的是给diff算法进行优化，降低js执行次数，优化渲染。\r\n              key必须在数组上下文环境的兄弟元素之间添加，并且每一个key都是唯一的【不能重复】\r\n              key:在循环体或数组环境中.万不得已时使用index【下标】.一般在项目开发中，我们使用id\r\n            </p>\r\n            <p>diff算法：计算虚拟dom的算法:</p>\r\n            <p>\r\n              {' '}\r\n              其执行原理是: 同级对比,层层匹配，发现不一致时直接用新的替换旧的\r\n            </p>\r\n            <p style={{ color: 'red' }}>注意:</p>\r\n            <p style={{ color: 'red' }}>\r\n              {' '}\r\n              1、最好不用index下标 因为index是可变的不确定的当数据增加或删除时\r\n              一旦发生改变 索引会重新排列 重新渲染\r\n              没有起到diff算法优化性能的作用\r\n            </p>\r\n            <p style={{ color: 'red' }}>\r\n              2、key不要用时间戳 和 随机数 因为它在每次都在改变每次都要重新排列\r\n            </p>\r\n          </Panel>\r\n        </Collapse>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Modal, Button } from 'antd';\r\nimport tupian from '../img/图片.jpg';\r\nexport default class Classdiff extends Component {\r\n  state = { visible: false };\r\n\r\n  showModal = () => {\r\n    this.setState({\r\n      visible: true\r\n    });\r\n  };\r\n\r\n  handleOk = e => {\r\n    console.log(e);\r\n    this.setState({\r\n      visible: false\r\n    });\r\n  };\r\n\r\n  handleCancel = e => {\r\n    console.log(e);\r\n    this.setState({\r\n      visible: false\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>\r\n          如果你是刚刚接触react不用担心，点击下面的按钮，让我们初步认识一下react吧！\r\n        </h2>\r\n        <div style={{ marginTop: '20px' }}>\r\n          <Button type=\"primary\" onClick={this.showModal}>\r\n            react初级笔记\r\n          </Button>\r\n          <Modal\r\n            title=\"note\"\r\n            visible={this.state.visible}\r\n            onOk={this.handleOk}\r\n            onCancel={this.handleCancel}\r\n          >\r\n            <h1>无状态组件</h1>\r\n            <p>引入react依赖:import React from 'react'</p>\r\n            <p>创建无状态组件:export default ()=>{}</p>\r\n            <p>\r\n              {' '}\r\n              props:在react里面叫属性\r\n              父组件传递给子组件上所有的属性都会在props里拿到props类型是对象\r\n            </p>\r\n            <hr />\r\n            <h1>class组件</h1>\r\n            <p>class组件:容器组件,功能组件</p>\r\n            <p>\r\n              详解:class关键字声明、组件名称、extends继承谁、\r\n              React.Component基础类\r\n            </p>\r\n            <p> class说明:在class里的继承必须是class,只有class才能继承class</p>\r\n            <p>\r\n              在class组件中dom元素必须是在render方法中渲染的和无状态组件有直接的区别\r\n            </p>\r\n            <hr />\r\n            <h1>jsx语法</h1>\r\n            <p>\r\n              jsx看上去很像html标签的语法,但他的底层还是js\r\n              React会将jsx语法转换为React.createElement去执行,所以jsx被称作React.createElement的语法糖\r\n            </p>\r\n            <p>使用驼峰式命名来定义属性的名称,而不使用html属性名称的命名约定</p>\r\n            <p>\r\n              {' '}\r\n              例如html中的tabindex属性变成了jsx的tabIndex而class属性则变成className这是因为class是JavaScript中的保留字,haiyoulabel的for属性用htmlFor\r\n              自定义属性必须小写\r\n            </p>\r\n            <hr />\r\n            <h1>生命周期及state</h1>\r\n            <p>生命周期的三个阶段</p>\r\n            <p>\r\n              1.1:挂载阶段 constructor[初始挂载] render[渲染呈现]\r\n              componentDidMount[挂载完成]\r\n            </p>\r\n            <p>1.2:更新阶段 render[渲染]/componentDidUpdate[更新完成]</p>\r\n            <p>1.3卸载阶段 componentWillUnmount [准备卸载]</p>\r\n            <hr />\r\n            <p>state状态</p>\r\n            <p> 2.1 定义:组件自由的状态 ,用来存数据的,他可以被组件自己修改</p>\r\n            <p> 2.2修改state使用this.setState方法,该方法接受一个对象</p>\r\n            <p> setState会在内部将新的值和state旧的值进行合并</p>\r\n            <p> 2.3 state一旦被修改就会触发组件更新阶段</p>\r\n            <hr />\r\n            <h1>setState</h1>\r\n            <p>1.setState不会立刻改变React的组件中state的值</p>\r\n            <p>2.setState通过触发一次组件的更新来引发重绘</p>\r\n            <p>3.多次setState函数调用产生的效果会合并</p>\r\n            <hr />\r\n            <h1>事件绑定</h1>\r\n            <p>1.在dom事件里用bind绑定：this.handleForceUpdate.bind(this)</p>\r\n            <p>缺点：每次点击的时都需要绑定，对this的开销是很浪费的。</p>\r\n            <p>优点：直观</p>\r\n            <p>构造函数中绑定事件</p>\r\n            <p>缺点:代码多</p>\r\n            <p>优点:比上一个好点</p>\r\n            <p>\r\n              推荐使用箭头函数\r\n              因为箭头函数自身没有this.需要向最近的作用域去找this.基于该特性，我们省去了显示绑定this.\r\n            </p>\r\n          </Modal>\r\n          <div>\r\n            <img src={tupian} style={{ marginLeft: '190px' }} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Descriptions } from 'antd';\r\n\r\nexport default props => {\r\n  return (\r\n    <Descriptions title=\"边界错误\">\r\n      <Descriptions.Item label=\"\" key=\"1\" span={3}>\r\n        <div>\r\n          <h2>定义：</h2>\r\n          <div>\r\n          使用私有钩子函数，捕获子组件的错误，并且优雅的使用备用ui来替代错误提示。\r\n   凡是导致页面无法渲染的错误\r\n          </div>\r\n        </div>\r\n        <div className=\"careful\">\r\n          <h2>注意：</h2>\r\n<h3>错误边界无法捕获以下场景中产生的错误：</h3>\r\n          <div>\r\n            <ul>\r\n              <li>1.接口错误</li>\r\n              <li>2.事件里的错误</li>\r\n              <li>3.服务端错误</li>\r\n              <li>4.非子组件的错误</li>\r\n            </ul>\r\n            </div>\r\n        </div>\r\n        <div>\r\n          <h2> 使用：</h2>\r\n          <div> 在本地开发环境中,还是会有错误提示的，但是打包代码上线后，给用户展示的就不会再有错误提示了。</div>\r\n        </div>\r\n        \r\n      </Descriptions.Item>\r\n    </Descriptions>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport {Descriptions} from \"antd\";\r\n\r\nexport default props => {\r\n  return (\r\n    <Descriptions title=\"列表和diff\">\r\n      <Descriptions.Item label=\"\" key=\"1\" span={3}>\r\n        <ul>\r\n          <li> 1、key 概念利用 diff 算法</li>\r\n          <li>2、元素的 key 只有在它和它的兄弟节点对比时才有意义。</li>\r\n          <li>3、 上下文对象是 this(一个空间的作用域)</li>\r\n        </ul>\r\n\r\n        <div className=\"box\">\r\n          <h4> key:为的是给diff算法进行优化，降低js执行次数，优化渲染。</h4>\r\n         <h4>key必须在数组上下文环境的兄弟元素之间添加，并且每一个key都是唯一的【不能重复】</h4>\r\n          <h4>key:在循环体或数组环境中.万不得已时使用index【下标】.一般在项目开发中，我们使用id</h4>\r\n          <h3>\r\n          diff算法：计算虚拟dom的算法:\r\n  其执行原理是: 同级对比,层层匹配，发现不一致时直接用新的替换旧的\r\n          </h3>\r\n          \r\n        </div>\r\n        <div className=\"box-bottom\">\r\n        <h2>注意：</h2>\r\n        <h3>1、最好不用index下标 因为index是可变的不确定的当数据增加或删除时 一旦发生改变 索引会重新排列 重新渲染 没有起到diff算法优化性能的作用</h3>\r\n        <h3>2、key不要用时间戳 和 随机数 因为它在每次都在改变每次都要重新排列 </h3>\r\n        </div>\r\n        \r\n      </Descriptions.Item>\r\n    </Descriptions>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { List } from 'antd';\r\n\r\nconst data = [\r\n  '1、event.target:被触发的具体的元素.这个是不确定的',\r\n  '2、event.currentTarget:事件被绑定到的具体元素',\r\n  '3、event.nativeEvent:原生事件对象',\r\n  '4、event.preventDefault() 清除默认事件',\r\n  '5、event.stopPropagation() 清除冒泡    清除冒泡写在要清除的子级上,因为冒泡是从内向外的(从子向父) '\r\n];\r\n\r\nexport default props => {\r\n  return (\r\n    <div>\r\n      <h3 style={{ margin: '16px 0' }}>event事件对象</h3>\r\n      <List\r\n        size=\"small\"\r\n        header={\r\n          <div>\r\n            <b>\r\n              event：事件对象---\r\n              react中叫做合成的事件对象【react封装的事件对象】\r\n            </b>\r\n            <h1 className=\"top\">\r\n              {' '}\r\n              <b>event事件对象包含的通用属性:</b>{' '}\r\n            </h1>\r\n          </div>\r\n        }\r\n        footer={\r\n          <div>\r\n            <h2>event.persist()</h2>\r\n            <h3>event.persist()将event对象的属性值强制保留</h3>\r\n            <h1>解决的问题：</h1>\r\n            event对象在异步方法里丢失属性值的问题。\r\n          </div>\r\n        }\r\n        bordered\r\n        dataSource={data}\r\n        renderItem={item => <List.Item>{item}</List.Item>}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React, { Component } from 'react';\r\nimport './index.scss';\r\nconst myState = {\r\n  text: '',\r\n  password: '',\r\n  selest: '',\r\n  checkbox: [false, false],\r\n  radio: '1',\r\n  textarea: '',\r\n  sex: '',\r\n  hobby: ''\r\n};\r\n\r\nexport default class Index extends Component {\r\n  //表单提交事件\r\n  handonSubmit = event => {\r\n    const { target } = event;\r\n    event.preventDefault(); //取消默认事件s\r\n    console.log(target.querySelectorAll('input[name=text]')[0].value);\r\n  };\r\n\r\n  fn = () => {\r\n    return (\r\n      <div>\r\n        <p style={{ textAlign: 'center', fontSize: '20px', color: 'white' }}>\r\n          这是你的个人资料\r\n        </p>\r\n        <br />\r\n        姓名:{this.state.text}\r\n        <br />\r\n        身高：{this.state.password}\r\n        <br />\r\n        性别：{this.state.sex}\r\n        <br />\r\n        个人爱好：{this.state.hobby}\r\n        <br />\r\n        所在城市：{this.state.selest}\r\n        <br />\r\n        个人简介{this.state.textarea}\r\n        <br />\r\n      </div>\r\n    );\r\n  };\r\n\r\n  //重置表单事件\r\n  reSetFrom = () => {\r\n    // console.log(myState);\r\n    this.setState(myState);\r\n  };\r\n  //改变state的值\r\n  handChange = ({ target }) => {\r\n    if (target.name === 'checkbox') {\r\n      const newCheckbox = [...this.state.checkbox];\r\n      newCheckbox[target.value] = target.checked;\r\n      console.log(([...this.state.checkbox][target.value] = target.checked));\r\n      return this.setState({\r\n        [target.name]: newCheckbox\r\n      });\r\n    }\r\n    this.setState({\r\n      [target.name]: target.value\r\n    });\r\n  };\r\n  constructor() {\r\n    super();\r\n    this.state = myState;\r\n  }\r\n  ooo = e => {\r\n    console.log(e.target.getAttribute('sex'));\r\n    this.setState({\r\n      sex: e.target.getAttribute('sex')\r\n    });\r\n  };\r\n  eee = e => {\r\n    console.log(e.target.getAttribute('hobby'));\r\n    this.setState({\r\n      hobby: e.target.getAttribute('hobby')\r\n    });\r\n  };\r\n  //渲染函数\r\n  render() {\r\n    const { text, password, checkbox, radio, textarea } = this.state;\r\n    return (\r\n      <div className=\"t-box\">\r\n        <form\r\n          onSubmit={this.handonSubmit}\r\n          onReset={this.reSetFrom}\r\n          autoComplete=\"off\"\r\n        >\r\n          <label>\r\n            用户名：\r\n            <input\r\n              type=\"text\"\r\n              value={text}\r\n              onChange={this.handChange}\r\n              name=\"text\"\r\n              className=\"shuru\"\r\n            />\r\n          </label>\r\n          <label>\r\n            身高：\r\n            <input\r\n              type=\"text\"\r\n              value={password}\r\n              onChange={this.handChange}\r\n              name=\"password\"\r\n              className=\"shuru\"\r\n            />\r\n          </label>\r\n          <label>\r\n            所在城市：\r\n            <select name=\"selest\" onChange={this.handChange}>\r\n              <option value=\"北京\">北京</option>\r\n              <option value=\"安徽\">安徽</option>\r\n              <option value=\"河北\">河北</option>\r\n            </select>\r\n          </label>\r\n          <label>\r\n            个人爱好： 足球：\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={checkbox[0]}\r\n              value=\"0\"\r\n              name=\"checkbox\"\r\n              hobby=\"足球\"\r\n              onClick={this.eee}\r\n              onChange={this.handChange}\r\n            />\r\n            篮球：{' '}\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={checkbox[1]}\r\n              value=\"1\"\r\n              name=\"checkbox\"\r\n              hobby=\"篮球\"\r\n              onClick={this.eee}\r\n              onChange={this.handChange}\r\n            />\r\n          </label>\r\n          <label>\r\n            性别： 男{' '}\r\n            <input\r\n              type=\"radio\"\r\n              name=\"radio\"\r\n              checked={radio === '1'}\r\n              value=\"1\"\r\n              sex=\"男\"\r\n              onClick={this.ooo}\r\n              onChange={this.handChange}\r\n            />\r\n            女\r\n            <input\r\n              type=\"radio\"\r\n              name=\"radio\"\r\n              checked={radio === '2'}\r\n              value=\"2\"\r\n              sex=\"女\"\r\n              onClick={this.ooo}\r\n              onChange={this.handChange}\r\n            />\r\n          </label>\r\n          <label>\r\n            个人简介：\r\n            <textarea\r\n              name=\"textarea\"\r\n              value={textarea}\r\n              onChange={this.handChange}\r\n            ></textarea>\r\n          </label>\r\n          <label>\r\n            <button type=\"button\" onClick={this.register}>\r\n              提交\r\n            </button>\r\n            {/* <button type=\"submit\">表单提交</button> */}\r\n            <button type=\"reset\">重新输入</button>\r\n          </label>\r\n        </form>\r\n        {this.fn.call(this)}\r\n      </div>\r\n    );\r\n  }\r\n  register = () => {\r\n    //前端验证，验证通过以后\r\n    // 2.调用接口，接口返回的数据存到全局里面\r\n    // 3.控制跳转到登陆页面\r\n    console.log(this.state.selest);\r\n    console.log(this.state.text);\r\n    console.log(this.state.password);\r\n    console.log(this.state.checkbox);\r\n    console.log(this.state.textarea);\r\n    console.log(this.state.sex);\r\n    // 1.前端验证，验证通过以后\r\n    const { text, password } = this.state;\r\n    if (!text) {\r\n      return alert('姓名不能为空');\r\n    } else if (!password) {\r\n      return alert('身高不能为空');\r\n    }\r\n  };\r\n}\r\n","import React, { Component } from 'react';\r\nimport Register from './register';\r\nimport Login from './login';\r\nimport Mylayout from '../components/Layout';\r\n\r\n//受控组件和非受控组价\r\nimport ComponentType from '../components/componentType';\r\n//条件渲染\r\nimport Install from '../components/Install';\r\n//表单的使用\r\nimport Cass from '../components/Cass-Z';\r\n//边界错误\r\nimport LifeCycle from '../components/LifeCycle-Z';\r\n//React中的列表和diff\r\nimport PropsContent from '../components/PropsContent-Z';\r\n//event事件对象\r\nimport Classdiff from '../components/Classdiff/Classdiff';\r\n//调查问卷\r\nimport Questionnaire from '../components/Questionnaire/';\r\nclass Index extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isCom: window.location.hash.slice(1) || 'Register'\r\n    };\r\n    window.onhashchange = () => {\r\n      this.setState({\r\n        isCom: window.location.hash.slice(1)\r\n      });\r\n    };\r\n  }\r\n  //获取返回组件的状态\r\n  getstatus = data => {\r\n    window.location.hash = data;\r\n  };\r\n  render() {\r\n    let Dom = '';\r\n    switch (this.state.isCom) {\r\n      case 'Register':\r\n        Dom = <Register getstatus={this.getstatus} />;\r\n        break;\r\n      case 'Login':\r\n        Dom = <Login getstatus={this.getstatus} />;\r\n        break;\r\n      case 'ComponentType':\r\n        Dom = <ComponentType />;\r\n        break;\r\n      case 'Install':\r\n        Dom = <Install />;\r\n        break;\r\n      case 'Cass':\r\n        Dom = <Cass />;\r\n        break;\r\n      case 'LifeCycle':\r\n        Dom = <LifeCycle />;\r\n        break;\r\n      case 'Classdiff':\r\n        Dom = <Classdiff />;\r\n        break;\r\n      case 'PropsContent':\r\n        Dom = <PropsContent />;\r\n        break;\r\n      case 'Questionnaire':\r\n        Dom = <Questionnaire />;\r\n        break;\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        {this.state.isCom == 'Register' ? (\r\n          <Register getstatus={this.getstatus} />\r\n        ) : this.state.isCom == 'Login' ? (\r\n          <Login getstatus={this.getstatus} />\r\n        ) : (\r\n          <Mylayout getstatus={this.getstatus}>{Dom}</Mylayout>\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nexport default Index;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","// 引入核心依赖库React\r\nimport React from \"react\";\r\n// 引入核心依赖ReactDOM他是基于react的所以必须在react依赖的下面引入\r\nimport ReactDOM from \"react-dom\";\r\n// 自己写的全局样式\r\nimport \"./asets/index.css\";\r\n// 引入antd样式\r\nimport \"antd/dist/antd.css\";\r\n// 引入一个组件\r\nimport App from './Login/index';\r\n// 引入离线缓存代码\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n// 使用ReactDOM渲染组件并挂载到根元素上\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n// 离线缓存\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}